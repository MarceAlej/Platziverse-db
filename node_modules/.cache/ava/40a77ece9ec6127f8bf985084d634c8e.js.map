{"version":3,"sources":["tests/agent-tests.js"],"names":["test","require","sinon","proxyquire","agentFixtures","config","logging","MetricStub","belongsTo","spy","id","single","Object","assign","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","findById","stub","withArgs","returns","Promise","resolve","byId","setupDatabase","afterEach","resetHistory","t","truthy","Agent","serial","true","called","calledWith","agent","deepEqual"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,aAAa,GAAGH,OAAO,CAAC,kBAAD,CAA7B;;AAEA,MAAMI,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,YAAY,CAEpB;AAHY,CAAf;AAMA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAEN,KAAK,CAACO,GAAN;AADM,CAAnB;AAIA,IAAIC,EAAE,GAAG,CAAT;AACA,IAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,aAAa,CAACO,MAAhC,CAAb;AACA,IAAIG,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAhB,IAAI,CAACiB,UAAL,CAAgB,YAAY;AAC1BD,EAAAA,OAAO,GAAGd,KAAK,CAACgB,aAAN,EAAV;AAEAJ,EAAAA,SAAS,GAAG;AACVK,IAAAA,OAAO,EAAEH,OAAO,CAACP,GAAR;AADC,GAAZ,CAH0B,CAO1B;;AACAK,EAAAA,SAAS,CAACM,QAAV,GAAqBJ,OAAO,CAACK,IAAR,EAArB;AACAP,EAAAA,SAAS,CAACM,QAAV,CAAmBE,QAAnB,CAA4BZ,EAA5B,EAAgCa,OAAhC,CAAwCC,OAAO,CAACC,OAAR,CAAgBrB,aAAa,CAACsB,IAAd,CAAmBhB,EAAnB,CAAhB,CAAxC;AAEA,QAAMiB,aAAa,GAAGxB,UAAU,CAAC,aAAD,EAAgB;AAC9C,sBAAkB,MAAMW,SADsB;AAE9C,uBAAmB,MAAMP;AAFqB,GAAhB,CAAhC;AAKAQ,EAAAA,EAAE,GAAG,MAAMY,aAAa,CAACtB,MAAD,CAAxB;AACD,CAjBD;AAmBAL,IAAI,CAAC4B,SAAL,CAAe,MAAM;AACnBZ,EAAAA,OAAO,IAAId,KAAK,CAAC2B,YAAN,EAAX;AACD,CAFD;AAIA7B,IAAI,CAAC,OAAD,EAAU8B,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAAShB,EAAE,CAACiB,KAAZ,EAAmB,4BAAnB;AACD,CAFG,CAAJ;AAIAhC,IAAI,CAACiC,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACxBA,EAAAA,CAAC,CAACI,IAAF,CAAOpB,SAAS,CAACK,OAAV,CAAkBgB,MAAzB,EAAiC,iCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOpB,SAAS,CAACK,OAAV,CAAkBiB,UAAlB,CAA6B7B,UAA7B,CAAP,EAAiD,8BAAjD;AAEAuB,EAAAA,CAAC,CAACI,IAAF,CAAO3B,UAAU,CAACC,SAAX,CAAqB2B,MAA5B,EAAoC,kCAApC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAO3B,UAAU,CAACC,SAAX,CAAqB4B,UAArB,CAAgCtB,SAAhC,CAAP,EAAmD,8BAAnD;AACD,CAND;AAQAd,IAAI,CAACiC,MAAL,CAAY,gBAAZ,EAA8B,MAAMH,CAAN,IAAW;AACrC,MAAIO,KAAK,GAAG,MAAMtB,EAAE,CAACiB,KAAH,CAASZ,QAAT,CAAkBV,EAAlB,CAAlB;AAEAoB,EAAAA,CAAC,CAACQ,SAAF,CAAYD,KAAZ,EAAmBjC,aAAa,CAACsB,IAAd,CAAmBhB,EAAnB,CAAnB,EAA2C,oBAA3C;AACH,CAJD","sourceRoot":"/Users/marce/Desktop/Platzi/Platziverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\nconst agentFixtures = require('./fixtures/agent')\n\nconst config = {\n  logging: function () {\n\n  }\n}\n\nconst MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet id = 1\nlet single = Object.assign({}, agentFixtures.single)\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  // model findById stub\n  AgentStub.findById = sandbox.stub()\n  AgentStub.findById.withArgs(id).returns(Promise.resolve(agentFixtures.byId(id)))\n\n  const setupDatabase = proxyquire('../index.js', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n  sandbox && sinon.resetHistory()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('setup', t => {\n  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the model')\n\n  t.true(MetricStub.belongsTo.called, 'MetricModel.hasMany was executed')\n  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the model')\n})\n\ntest.serial('Agent#findById', async t => {\n    let agent = await db.Agent.findById(id)\n\n    t.deepEqual(agent, agentFixtures.byId(id), 'should be the same')\n})\n"]}