{"version":3,"sources":["tests/agent-tests.js"],"names":["test","require","sinon","proxyquire","config","logging","MetricStub","belongsTo","spy","AgentStub","db","sandbox","beforeEach","createSandbox","hasMany","setupDatabase","afterEach","restore","t","truthy","Agent","serial","true","called"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,KAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMG,MAAM,GAAG;AACbC,EAAAA,OAAO,EAAE,YAAY,CAEpB;AAHY,CAAf;AAMA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,SAAS,EAAEL,KAAK,CAACM,GAAN;AADM,CAAnB;AAIA,IAAIC,SAAS,GAAG,IAAhB;AACA,IAAIC,EAAE,GAAG,IAAT;AACA,IAAIC,OAAO,GAAG,IAAd;AAEAX,IAAI,CAACY,UAAL,CAAgB,YAAY;AAC1BD,EAAAA,OAAO,GAAGT,KAAK,CAACW,aAAN,EAAV;AAEAJ,EAAAA,SAAS,GAAG;AACVK,IAAAA,OAAO,EAAEH,OAAO,CAACH,GAAR;AADC,GAAZ;AAIA,QAAMO,aAAa,GAAGZ,UAAU,CAAC,aAAD,EAAgB;AAC9C,sBAAkB,MAAMM,SADsB;AAE9C,uBAAmB,MAAMH;AAFqB,GAAhB,CAAhC;AAKAI,EAAAA,EAAE,GAAG,MAAMK,aAAa,CAACX,MAAD,CAAxB;AACD,CAbD;AAeAJ,IAAI,CAACgB,SAAL,CAAe,MAAM;AACjBL,EAAAA,OAAO,IAAIT,KAAK,CAACe,OAAN,EAAX;AACH,CAFD;AAIAjB,IAAI,CAAC,OAAD,EAAUkB,CAAC,IAAI;AACjBA,EAAAA,CAAC,CAACC,MAAF,CAAST,EAAE,CAACU,KAAZ,EAAmB,4BAAnB;AACD,CAFG,CAAJ;AAIApB,IAAI,CAACqB,MAAL,CAAY,OAAZ,EAAqBH,CAAC,IAAI;AACtBA,EAAAA,CAAC,CAACI,IAAF,CAAOb,SAAS,CAACK,OAAV,CAAkBS,MAAzB,EAAiC,iCAAjC;AACAL,EAAAA,CAAC,CAACI,IAAF,CAAOhB,UAAU,CAACC,SAAX,CAAqBgB,MAA5B,EAAoC,kCAApC;AACH,CAHD","sourceRoot":"/Users/marce/Desktop/Platzi/Platziverse-db","sourcesContent":["'use strict'\n\nconst test = require('ava')\nconst sinon = require('sinon')\nconst proxyquire = require('proxyquire')\n\nconst config = {\n  logging: function () {\n\n  }\n}\n\nconst MetricStub = {\n  belongsTo: sinon.spy()\n}\n\nlet AgentStub = null\nlet db = null\nlet sandbox = null\n\ntest.beforeEach(async () => {\n  sandbox = sinon.createSandbox()\n\n  AgentStub = {\n    hasMany: sandbox.spy()\n  }\n\n  const setupDatabase = proxyquire('../index.js', {\n    './models/agent': () => AgentStub,\n    './models/metric': () => MetricStub\n  })\n\n  db = await setupDatabase(config)\n})\n\ntest.afterEach(() => {\n    sandbox && sinon.restore()\n})\n\ntest('Agent', t => {\n  t.truthy(db.Agent, 'Agent service should exist')\n})\n\ntest.serial('setup', t => {\n    t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed')\n    t.true(MetricStub.belongsTo.called, 'MetricModel.hasMany was executed')\n})"]}