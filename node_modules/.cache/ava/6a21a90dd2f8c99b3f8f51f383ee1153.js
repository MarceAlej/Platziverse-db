'use strict';

const test = require('ava');

const sinon = require('sinon');

const proxyquire = require('proxyquire');

const agentFixtures = require('./fixtures/agent');

const config = {
  logging: function () {}
};
const MetricStub = {
  belongsTo: sinon.spy()
};
let id = 1;
let single = Object.assign({}, agentFixtures.single);
let AgentStub = null;
let db = null;
let sandbox = null;
test.beforeEach(async () => {
  sandbox = sinon.createSandbox();
  AgentStub = {
    hasMany: sandbox.spy()
  };
  const setupDatabase = proxyquire('../index.js', {
    './models/agent': () => AgentStub,
    './models/metric': () => MetricStub
  });
  db = await setupDatabase(config);
});
test.afterEach(() => {
  sandbox && sinon.resetHistory();
});
test('Agent', t => {
  t.truthy(db.Agent, 'Agent service should exist');
});
test.serial('setup', t => {
  t.true(AgentStub.hasMany.called, 'AgentModel.hasMany was executed');
  t.true(AgentStub.hasMany.calledWith(MetricStub), 'Argument should be the model');
  t.true(MetricStub.belongsTo.called, 'MetricModel.hasMany was executed');
  t.true(MetricStub.belongsTo.calledWith(AgentStub), 'Argument should be the model');
});
test.serial('Agent#findById', async t => {
  let agent = await db.Agent.findById(id);
  t.deepEqual(agent, agentFixtures.byId(id), 'should be the same');
});
//# sourceMappingURL=/Users/marce/Desktop/Platzi/Platziverse-db/node_modules/.cache/ava/6a21a90dd2f8c99b3f8f51f383ee1153.js.map